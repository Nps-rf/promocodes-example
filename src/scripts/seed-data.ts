import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { PromocodesService } from '../promocodes/promocodes.service';
import { PromocodeType } from '../promocodes/entities/promocode.entity';

async function seedData() {
  const app = await NestFactory.createApplicationContext(AppModule);
  const promocodesService = app.get(PromocodesService);

  console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    const promocodes = [
      {
        code: 'WELCOME100',
        amount: 100,
        type: PromocodeType.SINGLE_USE,
        description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 100 —Ä—É–±–ª–µ–π',
      },
      {
        code: 'SUMMER500',
        amount: 500,
        type: PromocodeType.SINGLE_USE,
        expiresAt: new Date('2024-08-31T23:59:59.000Z').toISOString(),
        usageLimit: 50,
        description: '–õ–µ—Ç–Ω—è—è –∞–∫—Ü–∏—è - 500 —Ä—É–±–ª–µ–π –¥–æ 31 –∞–≤–≥—É—Å—Ç–∞',
      },
      {
        code: 'REPEAT50',
        amount: 50,
        type: PromocodeType.MULTIPLE_USE,
        description: '–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 50 —Ä—É–±–ª–µ–π',
      },
      {
        code: 'LIMITED10',
        amount: 1000,
        type: PromocodeType.SINGLE_USE,
        usageLimit: 10,
        description: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 1000 —Ä—É–±–ª–µ–π (—Ç–æ–ª—å–∫–æ 10 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)',
      },
      {
        code: 'EXPIRED',
        amount: 200,
        type: PromocodeType.SINGLE_USE,
        expiresAt: new Date('2023-12-31T23:59:59.000Z').toISOString(),
        description: '–ò—Å—Ç–µ–∫—à–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      },
    ];

    for (const promocodeData of promocodes) {
      try {
        const promocode = await promocodesService.create(promocodeData);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: ${promocode.code}`);
      } catch {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–º–æ–∫–æ–¥ ${promocodeData.code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }

    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('- WELCOME100 (100‚ÇΩ, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)');
    console.log('- SUMMER500 (500‚ÇΩ, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, –∏—Å—Ç–µ–∫–∞–µ—Ç 31.08.2024, –ª–∏–º–∏—Ç 50)');
    console.log('- REPEAT50 (50‚ÇΩ, –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π)');
    console.log('- LIMITED10 (1000‚ÇΩ, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, –ª–∏–º–∏—Ç 10 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)');
    console.log('- EXPIRED (200‚ÇΩ, –∏—Å—Ç–µ–∫—à–∏–π, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫)');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await app.close();
  }
}

seedData();
